#include <iostream>
#include <fstream>
#include <string>
#include <memory>
#include <stdlib.h>
#include "libconv_gpu_integrate_first_half.cpp"

float mult(float l, float r){
    {
        { return l * r; }; 
    }
}
float add(float x, float y){
    {
        { return x+y; }; 
    }
}
float id(float x){
    {
        { return x; }; 
    }
}


int main( int argc, char** argv ) {

	lift_init();

    const int kernel_xdim_SV = 3;
    const int kernel_ydim_SV = 3;
    const int input_xdim_SV = 8;
    const int input_ydim_SV = 8;
    const int in_channels_SV = 2;
    const int out_channels_SV = 3;
    const int n_inputs_SV = 2;
    const unsigned int platform_id = 0, device_id = 0;

    float input_X[n_inputs_SV][input_ydim_SV][input_xdim_SV][in_channels_SV] = {
        {
        {{0.0, 0.0},   {1.0, 1.0},   {2.0, 2.0},   {3.0, 3.0},
         {4.0, 4.0},   {5.0, 5.0},   {6.0, 6.0},  {7.0, 7.0}},
        {{8.0, 8.0},   {9.0, 9.0},   {10.0, 10.0}, {11.0, 11.0},
         {12.0, 12.0}, {13.0, 13.0}, {14.0, 14.0}, {15.0, 15.0}},
        {{16.0, 16.0}, {17.0, 17.0}, {18.0, 18.0}, {19.0, 19.0},
         {20.0, 20.0}, {21.0, 21.0}, {22.0, 22.0}, {23.0, 23.0}},
        {{24.0, 24.0}, {25.0, 25.0}, {26.0, 26.0}, {27.0, 27.0},
         {28.0, 28.0}, {29.0, 29.0}, {30.0, 30.0}, {31.0, 31.0}},
        {{32.0, 32.0}, {33.0, 33.0}, {34.0, 34.0}, {35.0, 35.0},
         {36.0, 36.0}, {37.0, 37.0}, {38.0, 38.0}, {39.0, 39.0}},
        {{40.0, 40.0}, {41.0, 41.0}, {42.0, 42.0}, {43.0, 43.0},
         {44.0, 44.0}, {45.0, 45.0}, {46.0, 46.0}, {47.0, 47.0}},
        {{48.0, 48.0}, {49.0, 49.0}, {50.0, 50.0}, {51.0, 51.0},
         {52.0, 52.0}, {53.0, 53.0}, {54.0, 54.0}, {55.0, 55.0}},
        {{56.0, 56.0}, {57.0, 57.0}, {58.0, 58.0}, {59.0, 59.0},
         {60.0, 60.0}, {61.0, 61.0}, {62.0, 62.0}, {63.0, 63.0}}},
        {
        {{0.0, 0.0},   {1.0, 1.0},   {2.0, 2.0},   {3.0, 3.0},
         {4.0, 4.0},   {5.0, 5.0},   {6.0, 6.0},  {7.0, 7.0}},
        {{8.0, 8.0},   {9.0, 9.0},   {10.0, 10.0}, {11.0, 11.0},
         {12.0, 12.0}, {13.0, 13.0}, {14.0, 14.0}, {15.0, 15.0}},
        {{16.0, 16.0}, {17.0, 17.0}, {18.0, 18.0}, {19.0, 19.0},
         {20.0, 20.0}, {21.0, 21.0}, {22.0, 22.0}, {23.0, 23.0}},
        {{24.0, 24.0}, {25.0, 25.0}, {26.0, 26.0}, {27.0, 27.0},
         {28.0, 28.0}, {29.0, 29.0}, {30.0, 30.0}, {31.0, 31.0}},
        {{32.0, 32.0}, {33.0, 33.0}, {34.0, 34.0}, {35.0, 35.0},
         {36.0, 36.0}, {37.0, 37.0}, {38.0, 38.0}, {39.0, 39.0}},
        {{40.0, 40.0}, {41.0, 41.0}, {42.0, 42.0}, {43.0, 43.0},
         {44.0, 44.0}, {45.0, 45.0}, {46.0, 46.0}, {47.0, 47.0}},
        {{48.0, 48.0}, {49.0, 49.0}, {50.0, 50.0}, {51.0, 51.0},
         {52.0, 52.0}, {53.0, 53.0}, {54.0, 54.0}, {55.0, 55.0}},
        {{56.0, 56.0}, {57.0, 57.0}, {58.0, 58.0}, {59.0, 59.0},
         {60.0, 60.0}, {61.0, 61.0}, {62.0, 62.0}, {63.0, 63.0}}}};

     float input_B[out_channels_SV] = {0.0, 1.0, 2.0};

     float input_K[kernel_ydim_SV][kernel_xdim_SV][in_channels_SV][out_channels_SV] = {{
        {{1.0, 0.0, 1.0}, {0.0, 1.0, 0.0}},
        {{3.0, 0.0, 3.0}, {0.0, 3.0, 0.0}},
        {{5.0, 0.0, 5.0}, {0.0, 5.0, 0.0}}},
       {{{7.0, 0.0, 7.0}, {0.0, 7.0, 0.0}},
        {{9.0, 0.0, 9.0}, {0.0, 9.0, 0.0}},
        {{11.0, 0.0, 11.0}, {0.0, 11.0, 0.0}}},
       {{{13.0, 0.0, 13.0}, {0.0, 13.0, 0.0}},
        {{15.0, 0.0, 15.0}, {0.0, 15.0, 0.0}},
        {{17.0, 0.0, 17.0}, {0.0, 17.0, 0.0}}}};

    /* float out[n_inputs_SV][input_ydim_SV - (kernel_ydim_SV - 1)][input_xdim_SV - (kernel_xdim_SV - 1)][out_channels_SV] = {0}; */

    float *out1 = nullptr;


    execute(reinterpret_cast<float *>(input_K), reinterpret_cast<float *>(input_B), reinterpret_cast<float *>(input_X), out1);
    


	float (&out)[n_inputs_SV][input_ydim_SV - (kernel_ydim_SV - 1)][input_xdim_SV - (kernel_xdim_SV - 1)][out_channels_SV] = *reinterpret_cast<float (*)[n_inputs_SV][input_ydim_SV - (kernel_ydim_SV - 1)][input_xdim_SV - (kernel_xdim_SV - 1)][out_channels_SV]>(out1);


    float gold[][input_ydim_SV - (kernel_ydim_SV - 1)][input_xdim_SV - (kernel_xdim_SV - 1)][out_channels_SV] = {
        {{{1029, 1029+1, 1029+2}, {1110, 1110+1, 1110+2}, {1191, 1191+1, 1191+2},
          {1272, 1272+1, 1272+2}, {1353, 1353+1, 1353+2}, {1434, 1434+1, 1434+2}},
         {{1677, 1677+1, 1677+2}, {1758, 1758+1, 1758+2}, {1839, 1839+1, 1839+2},
          {1920, 1920+1, 1920+2}, {2001, 2001+1, 2001+2}, {2082, 2082+1, 2082+2}},
         {{2325, 2325+1, 2325+2}, {2406, 2406+1, 2406+2}, {2487, 2487+1, 2487+2},
          {2568, 2568+1, 2568+2}, {2649, 2649+1, 2649+2}, {2730, 2730+1, 2730+2}},
         {{2973, 2973+1, 2973+2}, {3054, 3054+1, 3054+2}, {3135, 3135+1, 3135+2},
          {3216, 3216+1, 3216+2}, {3297, 3297+1, 3297+2}, {3378, 3378+1, 3378+2}},
         {{3621, 3621+1, 3621+2}, {3702, 3702+1, 3702+2}, {3783, 3783+1, 3783+2},
          {3864, 3864+1, 3864+2}, {3945, 3945+1, 3945+2}, {4026, 4026+1, 4026+2}},
         {{4269, 4269+1, 4269+2}, {4350, 4350+1, 4350+2}, {4431, 4431+1, 4431+2},
          {4512, 4512+1, 4512+2}, {4593, 4593+1, 4593+2}, {4674, 4674+1, 4674+2}}},
        {{{1029, 1029+1, 1029+2}, {1110, 1110+1, 1110+2}, {1191, 1191+1, 1191+2},
          {1272, 1272+1, 1272+2}, {1353, 1353+1, 1353+2}, {1434, 1434+1, 1434+2}},
         {{1677, 1677+1, 1677+2}, {1758, 1758+1, 1758+2}, {1839, 1839+1, 1839+2},
          {1920, 1920+1, 1920+2}, {2001, 2001+1, 2001+2}, {2082, 2082+1, 2082+2}},
         {{2325, 2325+1, 2325+2}, {2406, 2406+1, 2406+2}, {2487, 2487+1, 2487+2},
          {2568, 2568+1, 2568+2}, {2649, 2649+1, 2649+2}, {2730, 2730+1, 2730+2}},
         {{2973, 2973+1, 2973+2}, {3054, 3054+1, 3054+2}, {3135, 3135+1, 3135+2},
          {3216, 3216+1, 3216+2}, {3297, 3297+1, 3297+2}, {3378, 3378+1, 3378+2}},
         {{3621, 3621+1, 3621+2}, {3702, 3702+1, 3702+2}, {3783, 3783+1, 3783+2},
          {3864, 3864+1, 3864+2}, {3945, 3945+1, 3945+2}, {4026, 4026+1, 4026+2}},
         {{4269, 4269+1, 4269+2}, {4350, 4350+1, 4350+2}, {4431, 4431+1, 4431+2},
          {4512, 4512+1, 4512+2}, {4593, 4593+1, 4593+2}, {4674, 4674+1, 4674+2}}}};


    // Verify the result
    bool result=true;
    for (int i=0; i < n_inputs_SV; i++) {
        for (int j=0; j < input_ydim_SV - (kernel_ydim_SV - 1); j++) {
            printf("[");
            for (int k=0; k < input_xdim_SV - (kernel_xdim_SV - 1); k++) {
                for (int l=0; l < out_channels_SV; l++) {
                    if (out[i][j][k][l] != gold[i][j][k][l]) {
                        result=false;
                        printf("%f != %f\n", out[i][j][k][l], gold[i][j][k][l]);
                        printf("Fail.\n");
                        return( EXIT_SUCCESS );
                    } else {                            
                        printf(" %d", (int)out[i][j][k][l]); 
                    }
                }
                printf(",");
            }
            printf("]\n");
        }
    }

    std::cout<< "Success!\n";

    std::cout << "Done.\n";
    return( EXIT_SUCCESS );
}
